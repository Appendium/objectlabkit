<document>
  <properties>
    <author email="Kit@objectlab.co.uk">Benoit Xhenseval</author>
    <title>Introduction</title>
  </properties>
  <head>
    <meta name="description"
	content="ObjectLab Kit offers free and open source Date calculators, released under the business-friendly Apache 2.0 license."
	/>

    <meta name="keywords"
        content="Date calculator, IMM Dates, Period Calculator, Financial Calendar, Business Calendar, java, open source" />
    <meta name="Subject" content="Date Calculators" />
    <meta name="Copyright" content="ObjectLab Financial Ltd" />
    <meta name="Language" content="English" />
    <meta name="Designer" content="ObjectLab Financial Ltd" />
    <meta name="Distribution" content="Global" />
    <meta name="robots" content="ALL"/>
    <meta name="Revisit-After" content="20 Days" />
  </head>
  <body>
    <!-- The body of the document contains a number of sections -->
    <section name="ObjectLab Kit Introduction">

    <p>ObjectLab Kit came out of our frustration to have to re-do the same kind of code over and over each time we
    joined a new company and Bank.  Most banks will require basic Date calculation, we did spot another open source
    project for this but their licence forbids most financial institution from using it.  This one is released under
    the business-friendly Apache 2.0 license.</p>

    <subsection name="So, what is on offer?">
    <p>The initial release provides 2 implementations for <strong>Date calculations</strong>, both depend on the classes in datecalc-common. So, 
    you need to include:</p>
    <ul>
    <li><strong>datecalc-common.jar</strong> (mandatory)</li>
    <li>and either <strong>datecalc-jdk.jar</strong> OR <strong>datecalc-joda.jar</strong></li>
    </ul>
    
    <p>the <a href="./multiproject/datecalc-jdk/index.html">datecalc-jdk.jar</a> has no dependencies other than JDK 1.5+.  
    <a href="./multiproject/datecalc-joda/index.html">datecalc-joda.jar</a> is based on the powerful 
    <a href="http://joda-time.sourceforge.net">JODA-Time</a> library (we recommend it!)</p>
    </subsection>
    
    <subsection name ="Date Calculations? What is that?">
    <p>Apart from the very basic "add days" features, most business have to <strong>deal with Holidays</strong> and what to do when a
    <strong>calculated day falls on a holiday</strong>.  This library does <strong>not</strong> attempt to create or guess the holidays, we
    all know that some bank holidays can be decided at a moment's notice in some markets.  All financial institutions or 
    big business will have their own official list of 'holidays' anyway.</p>
    <p>Furthermore, "weekends" also need to be handled and some market have a different week to the conventional Monday ->
    Friday, our library provides you with full flexibility to design a Working Week.</p>
    <p>As such a Non-working Day can be a holiday or a 'weekend'.</p>       
    </subsection>


    <subsection name ="Ok, what algorithm for handling a holiday do you support?">
    <p>At the moment, we support the following 5 algorithms:</p>
    <ol>
    	<li><strong>Do Nothing</strong>, i.e. leave the date as-is, even if it is a non-working day.</li>
    	<li><strong>Forward</strong>, if the date is a non-working day, move forward to the next working day.</li>
    	<li><strong>Backward</strong>, if the date is a non-working day, move backward to the previous working day.</li>
    	<li><strong>Modified Following</strong>, if the date is a non-working day, move forward to the next working day, 
    	UNLESS it crosses over a new month, in which case we revert to find the last working day of the current month.</li>
    	<li><strong>Modified Preceeding</strong>, if the date is a non-working day, move backward to the previous working day, 
    	UNLESS it crosses over a new month, in which case we revert to find the next working day of the current month.</li>
    </ol>
    <p>See this page for some <a href="algo.html">examples</a>.</p>
    </subsection>
    
    <subsection name="Which JDK?">
    <p>1.5+, get over it :-)</p>
    </subsection>
    
    <subsection name="UML?">
    <p>We are using yDoc to generate a 'javadoc-like' documentation per module with the added twist of UML diagrams:</p>
    <ul>
       <li><a href="multiproject/datecalc-common/apidocs/index.html">UML for DateCalc Common</a></li>
       <li><a href="multiproject/datecalc-jdk/apidocs/index.html">UML for DateCalc JDK</a></li>
       <li><a href="multiproject/datecalc-joda/apidocs/index.html">UML for DateCalc JODA</a></li>
    </ul>
    </subsection>
    
    <subsection name="Main interfaces">
    <p>The main interfaces are:</p>
    <ul>
    <li><a href="./multiproject/datecalc-common/apidocs/net/objectlab/kit/datecalc/common/DateCalculator.html">DateCalculator</a> for all Date calculations.</li>
    <li><a href="./multiproject/datecalc-common/apidocs/net/objectlab/kit/datecalc/common/PeriodCountCalculator.html">PeriodCountCalculator</a> for all day, month and year diff calculations.</li>
    <li><a href="./multiproject/datecalc-common/apidocs/net/objectlab/kit/datecalc/common/IMMDateCalculator.html">IMMDateCalculator</a> for all IMM calculations (International Money Market).</li>
    </ul>
    <p>Here are the examples of how to get a DateCalculator "forward" for the "UK" holidays (if you have registered the holidays). The WorkingWeek is Mon-Fri by default.</p>
    	<h4>JDK</h4>
    	<p>2 implementations for Pure JDK have been released</p>
    	<ol>
    		<li><strong>Calendar:</strong>
    		<pre>
DateCalculator&lt;Calendar> calc = CalendarKitCalculatorsFactory.getDefaultInstance().getDateCalculator("UK", HolidayHandlerType.FORWARD);
PeriodCountCalculator&lt;Calendar> calc = CalendarKitCalculatorsFactory.getDefaultInstance().getPeriodCountCalculator();
IMMDateCalculator&lt;Calendar> calc = CalendarKitCalculatorsFactory.getDefaultInstance().getIMMDateCalculator();
    		</pre>
    		</li>
    		<li><strong>Date:</strong><pre>
DateCalculator&lt;Date> calc = DateKitCalculatorsFactory.getDefaultInstance().getDateCalculator("UK", HolidayHandlerType.FORWARD);
PeriodCountCalculator&lt;Date> calc = DateKitCalculatorsFactory.getDefaultInstance().getPeriodCountCalculator();
IMMDateCalculator&lt;Date> calc = DateKitCalculatorsFactory.getDefaultInstance().getIMMDateCalculator();
    		</pre></li>
    	</ol>
    	<h4>JODA</h4>
    	<p>2 implementations for Joda have been released</p>
    	<ol>
    		<li><strong>LocalDate</strong> (preferred):<pre>
DateCalculator&lt;LocalDate> calc = LocalDateKitCalculatorsFactory.getDefaultInstance().getDateCalculator("UK", HolidayHandlerType.FORWARD);
PeriodCountCalculator&lt;LocalDate> calc = LocalDateKitCalculatorsFactory.getDefaultInstance().getPeriodCountCalculator();
IMMDateCalculator&lt;LocalDate> calc = LocalDateKitCalculatorsFactory.getDefaultInstance().getIMMDateCalculator();
    		</pre></li>
    		<li><strong>YearMonthDay:</strong><pre>
DateCalculator&lt;YearMonthDay> calc = YearMonthDayKitCalculatorsFactory.getDefaultInstance().getDateCalculator("UK", HolidayHandlerType.FORWARD);
PeriodCountCalculator&lt;YearMonthDay> calc = YearMonthDayKitCalculatorsFactory.getDefaultInstance().getPeriodCountCalculator();
IMMDateCalculator&lt;YearMonthDay> calc = YearMonthDayKitCalculatorsFactory.getDefaultInstance().getIMMDateCalculator();
    		</pre></li>
    	</ol>
    </subsection>
    </section>
    
    <section name="How do I use it?">
    <p>There are several steps</p>
    <ul>
        <li>Register holidays in the factory by calling registerHolidays(final String name, Set&lt;Date> holidays)</li>
    	<li>Use the factory to get a DateCalculator with a given Handler (forward/backward etc), it is a disposable object that should <strong>not</strong> be shared accross threads, each thread 
    	should get its own!</li>
    	<li>when you get a DateCalculator, you can set the startDate, this sets the currentDate too.  The startDate does not move.  The current date is
    	the result of your calculations.  If the startDate is a non-working day, it may be moved automatically according to the HolidayHandler.</li>
    	<li>when you call moveByDays(..), moveByBusinessDays(..) the currentDate is moved in the Calculator.</li>
    </ul>
    
    <subsection name="Using Joda-time LocalDate">
    
    <pre>
// create or get the Holidays
final Set&lt;LocalDate> holidays = new HashSet&lt;LocalDate>();
holidays.add(new LocalDate("2006-08-28"));
  
// register the holidays (any calculator with name "UK" asked from now on will receive a reference to this set
DefaultDateCalculatorFactory.getDefaultInstance().registerHolidays("UK", holidays);

// ask for a LocalDate calculator for "UK" (even if a new set of holidays is registered, this one calculator is not affected
DateCalculator&lt;LocalDate> cal = LocalDateKitCalculatorsFactory.getDefaultInstance().getDateCalculator("UK", HolidayHandlerType.FORWARD);
cal.setStartDate(new LocalDate("2006-08-28)); // this also sets the current business date.

// the startDate stays 28 Aug 06 BUT the currentDate has moved, 
// according to Forward handler to 29 Aug 2006.
LocalDate start = cal.getStartDate();   // 28 Aug 06
LocalDate current = cal.getCurrentBusinessDate(); // 29 Aug 06

LocalDate newCurrent = cal.moveByDays(4).getCurrentBusinessDate(); // 4 Sept 06 due to weekend!
    </pre>
      
    </subsection>


    <subsection name="Using JDK Calendar">
    
    <pre>
// create or get the Holidays
final Set&lt;Calendar> holidays = new HashSet&lt;Calendar>();
Calendar calendar = Calendar.getInstance();
calendar.set(Calendar.DAY_OF_MONTH,28);
calendar.set(Calendar.MONTH,Calendar.AUGUST);
calendar.set(Calendar.YEAR,2006);
holidays.add(calendar);
  
// register the holidays (any calculator with name "UK" asked from now on will receive a reference to this set
DefaultDateCalculatorFactory.getDefaultInstance().registerHolidays("UK", holidays);

// ask for a LocalDate calculator for "UK" (even if a new set of holidays is registered, this one calculator is not affected
DateCalculator&lt;Calendar> cal = LocalDateKitCalculatorsFactory.getDefaultInstance().getDateCalculator("UK", HolidayHandlerType.FORWARD);
Calendar initial = Calendar.getInstance();
initial.set(Calendar.DAY_OF_MONTH,28);
initial.set(Calendar.MONTH,Calendar.AUGUST);
initial.set(Calendar.YEAR,2006);

cal.setStartDate(initial); // this also sets the current business date.

// the startDate stays 28 Aug 06 BUT the currentDate has moved, 
// according to Forward handler to 29 Aug 2006.
Calendar start = cal.getStartDate();   // 28 Aug 06
Calendar current = cal.getCurrentBusinessDate(); // 29 Aug 06

Calendar newCurrent = cal.moveByDays(4).getCurrentBusinessDate(); // 4 Sept 06 due to weekend!
    </pre>
      
    </subsection>

    </section>

  </body>
</document>